
import React, { useState } from 'react';
import { GlassCard, GlassCardContent, GlassCardHeader, GlassCardTitle } from '@/components/ui/glass-card';
import { GlassButton } from '@/components/ui/glass-button';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import EligibilityCheckerModal from './EligibilityCheckerModal';

const HowItWorksSection: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const steps = [
    {
      icon: "üìù",
      title: "ƒêƒÉng k√Ω & Ki·ªÉm tra",
      description: "ƒêi·ªÅn th√¥ng tin c√° nh√¢n v√† th·ª±c hi·ªán kh√°m s∆° b·ªô",
      time: "15-20 ph√∫t"
    },
    {
      icon: "ü©∏",
      title: "Hi·∫øn m√°u",
      description: "Qu√° tr√¨nh hi·∫øn m√°u an to√†n v·ªõi thi·∫øt b·ªã y t·∫ø hi·ªán ƒë·∫°i",
      time: "8-10 ph√∫t"
    },
    {
      icon: "üç™",
      title: "Ngh·ªâ ng∆°i",
      description: "Th∆∞ gi√£n v√† b·ªï sung nƒÉng l∆∞·ª£ng sau khi hi·∫øn m√°u",
      time: "10-15 ph√∫t"
    },
    {
      icon: "üèÜ",
      title: "Ho√†n th√†nh",
      description: "Nh·∫≠n gi·∫•y ch·ª©ng nh·∫≠n v√† l·ªùi c·∫£m ∆°n t·ª´ c·ªông ƒë·ªìng",
      time: "T·ªïng: 45-60 ph√∫t"
    }
  ];

  const faqs = [
    {
      question: "Hi·∫øn m√°u c√≥ ƒëau kh√¥ng?",
      answer: "Kim ti√™m hi·ªán ƒë·∫°i gi√∫p gi·∫£m thi·ªÉu c·∫£m gi√°c ƒëau. H·∫ßu h·∫øt ng∆∞·ªùi hi·∫øn m√°u ch·ªâ c·∫£m th·∫•y m·ªôt ch√∫t kh√≥ ch·ªãu nh·∫π khi kim ƒë√¢m v√†o."
    },
    {
      question: "T√¥i c√≥ th·ªÉ hi·∫øn m√°u bao l√¢u m·ªôt l·∫ßn?",
      answer: "Ng∆∞·ªùi tr∆∞·ªüng th√†nh kh·ªèe m·∫°nh c√≥ th·ªÉ hi·∫øn m√°u m·ªói 3 th√°ng m·ªôt l·∫ßn (12 tu·∫ßn). ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o c∆° th·ªÉ c√≥ ƒë·ªß th·ªùi gian ph·ª•c h·ªìi."
    },
    {
      question: "C√≥ nh·ªØng l·ª£i √≠ch g√¨ khi hi·∫øn m√°u?",
      answer: "B·∫°n s·∫Ω ƒë∆∞·ª£c kh√°m s·ª©c kh·ªèe mi·ªÖn ph√≠, ki·ªÉm tra c√°c ch·ªâ s·ªë m√°u c∆° b·∫£n, v√† c√≥ c∆° h·ªôi gi√∫p c·ª©u s·ªëng nh·ªØng ng∆∞·ªùi kh√°c."
    }
  ];

  return (
    <section className="py-16 px-4">
      <div className="container-custom">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Quy Tr√¨nh Hi·∫øn M√°u
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            T√¨m hi·ªÉu quy tr√¨nh hi·∫øn m√°u an to√†n v√† nh·ªØng th√¥ng tin c·∫ßn bi·∫øt
          </p>
        </div>

        {/* Process Steps */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
          {steps.map((step, index) => (
            <GlassCard key={index} className="text-center p-6 hover:shadow-xl transition-all duration-300">
              <div className="text-4xl mb-4">{step.icon}</div>
              <h3 className="font-semibold text-lg mb-2">{step.title}</h3>
              <p className="text-gray-600 text-sm leading-relaxed mb-3">{step.description}</p>
              <div className="inline-block bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-medium">
                {step.time}
              </div>
            </GlassCard>
          ))}
        </div>

        {/* Information Cards */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
          <GlassCard className="p-8">
            <GlassCardHeader className="pb-6">
              <GlassCardTitle className="text-2xl mb-4 flex items-center gap-3">
                <span className="text-2xl">‚úì</span>
                Ki·ªÉm Tra ƒêi·ªÅu Ki·ªán
              </GlassCardTitle>
            </GlassCardHeader>
            <GlassCardContent>
              <p className="text-gray-600 mb-6 leading-relaxed">
                Th·ª±c hi·ªán b√†i ki·ªÉm tra nhanh v√† ·∫©n danh ƒë·ªÉ x√°c ƒë·ªãnh b·∫°n c√≥ ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u hay kh√¥ng
              </p>
              <GlassButton 
                variant="primary" 
                size="lg" 
                className="w-full"
                onClick={() => setIsModalOpen(true)}
              >
                B·∫Øt ƒë·∫ßu ki·ªÉm tra
              </GlassButton>
            </GlassCardContent>
          </GlassCard>
          <GlassCard className="p-8">
            <GlassCardHeader className="pb-6">
              <GlassCardTitle className="text-2xl mb-4 flex items-center gap-3">
                <span className="text-2xl">üõ°Ô∏è</span>
                An To√†n & B·∫£o ƒê·∫£m
              </GlassCardTitle>
            </GlassCardHeader>
            <GlassCardContent className="space-y-4">
              <div className="flex items-start gap-3">
                <span className="text-green-600 text-xl">‚úì</span>
                <p className="text-gray-600">Thi·∫øt b·ªã y t·∫ø hi·ªán ƒë·∫°i, v√¥ tr√πng</p>
              </div>
              <div className="flex items-start gap-3">
                <span className="text-green-600 text-xl">‚úì</span>
                <p className="text-gray-600">ƒê·ªôi ng≈© y b√°c sƒ© chuy√™n nghi·ªáp</p>
              </div>
              <div className="flex items-start gap-3">
                <span className="text-green-600 text-xl">‚úì</span>
                <p className="text-gray-600">Tu√¢n th·ªß ti√™u chu·∫©n y t·∫ø qu·ªëc t·∫ø</p>
              </div>
              <GlassButton variant="default" size="lg" className="w-full mt-6">
                Xem chi ti·∫øt an to√†n
              </GlassButton>
            </GlassCardContent>
          </GlassCard>

          <GlassCard className="p-8">
            <GlassCardHeader className="pb-6">
              <GlassCardTitle className="text-2xl mb-4 flex items-center gap-3">
                <span className="text-2xl">üíù</span>
                L·ª£i √çch Khi Hi·∫øn M√°u
              </GlassCardTitle>
            </GlassCardHeader>
            <GlassCardContent className="space-y-4">
              <div className="flex items-start gap-3">
                <span className="text-red-600 text-xl">‚ô•Ô∏è</span>
                <p className="text-gray-600">Kh√°m s·ª©c kh·ªèe mi·ªÖn ph√≠</p>
              </div>
              <div className="flex items-start gap-3">
                <span className="text-red-600 text-xl">‚ô•Ô∏è</span>
                <p className="text-gray-600">Ki·ªÉm tra m√°u c∆° b·∫£n</p>
              </div>
              <div className="flex items-start gap-3">
                <span className="text-red-600 text-xl">‚ô•Ô∏è</span>
                <p className="text-gray-600">C·ª©u s·ªëng nh·ªØng ng∆∞·ªùi kh√°c</p>
              </div>
              <GlassButton variant="secondary" size="lg" className="w-full mt-6">
                T√¨m hi·ªÉu th√™m
              </GlassButton>
            </GlassCardContent>
          </GlassCard>
        </div>

        {/* FAQ Accordion */}
        <GlassCard className="max-w-4xl mx-auto p-8">
          <h3 className="text-2xl font-bold text-center text-gray-900 mb-8">
            C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
          </h3>
          <Accordion type="single" collapsible className="w-full">
            {faqs.map((faq, index) => (
              <AccordionItem key={index} value={`item-${index}`}>
                <AccordionTrigger className="text-left">{faq.question}</AccordionTrigger>
                <AccordionContent className="text-gray-600 leading-relaxed">
                  {faq.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
          <div className="text-center mt-8">
            <GlassButton variant="default" size="lg">
              Xem t·∫•t c·∫£ c√¢u h·ªèi
            </GlassButton>
          </div>
        </GlassCard>
      </div>

      {/* Eligibility Checker Modal */}
      <EligibilityCheckerModal 
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      />
    </section>
  );
};

export default HowItWorksSection;
