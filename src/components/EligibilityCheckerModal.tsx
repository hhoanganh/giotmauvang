
import React, { useState, useEffect } from 'react';
import { X, ArrowLeft, ArrowRight, CheckCircle, XCircle, AlertCircle } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { GlassCard, GlassCardContent, GlassCardHeader, GlassCardTitle } from '@/components/ui/glass-card';
import { GlassButton } from '@/components/ui/glass-button';

interface Question {
  id: number;
  text: string;
  options: {
    value: 'yes' | 'no' | 'uncertain' | 'not-applicable';
    label: string;
    color?: string;
  }[];
  isWomenOnly?: boolean;
}

interface EligibilityCheckerModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const questions: Question[] = [
  {
    id: 1,
    text: "Hi·ªán t·∫°i, anh/ch·ªã c√≥ b·ªã c√°c b·ªánh: vi√™m kh·ªõp, ƒëau d·∫° d√†y, vi√™m gan/ v√†ng da, b·ªánh tim, huy·∫øt √°p th·∫•p/cao, hen, ho k√©o d√†i, b·ªánh m√°u, lao?",
    options: [
      { value: 'yes', label: 'C√≥' },
      { value: 'no', label: 'Kh√¥ng' },
      { value: 'uncertain', label: 'Kh√¥ng ch·∫Øc ch·∫Øn' }
    ]
  },
  {
    id: 2,
    text: "Trong v√≤ng 12 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥ m·∫Øc c√°c b·ªánh v√† ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu tr·ªã kh·ªèi: S·ªët r√©t, Giang mai, Lao, Vi√™m n√£o, Ph·∫´u thu·∫≠t ngo·∫°i khoa? ƒê∆∞·ª£c truy·ªÅn m√°u v√† c√°c ch·∫ø ph·∫©m m√°u? Ti√™m Vacxin b·ªánh d·∫°i?",
    options: [
      { value: 'yes', label: 'C√≥' },
      { value: 'no', label: 'Kh√¥ng' },
      { value: 'uncertain', label: 'Kh√¥ng ch·∫Øc ch·∫Øn' }
    ]
  },
  {
    id: 3,
    text: "Trong v√≤ng 06 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥ b·ªã m·ªôt trong s·ªë c√°c tri·ªáu ch·ª©ng sau kh√¥ng? S√∫t c√¢n nhanh kh√¥ng r√µ nguy√™n nh√¢n? N·ªïi h·∫°ch k√©o d√†i? Ch·ªØa rƒÉng, ch√¢m c·ª©u? XƒÉm m√¨nh, x·ªè l·ªó tai, l·ªó m≈©i? S·ª≠ d·ª•ng ma t√∫y? Quan h·ªá t√¨nh d·ª•c v·ªõi ng∆∞·ªùi nhi·ªÖm HIV ho·∫∑c ng∆∞·ªùi c√≥ h√†nh vi nguy c∆° l√¢y nhi·ªÖm HIV? Quan h·ªá t√¨nh d·ª•c v·ªõi ng∆∞·ªùi c√πng gi·ªõi?",
    options: [
      { value: 'yes', label: 'C√≥' },
      { value: 'no', label: 'Kh√¥ng' },
      { value: 'uncertain', label: 'Kh√¥ng ch·∫Øc ch·∫Øn' }
    ]
  },
  {
    id: 4,
    text: "Trong 01 th√°ng g·∫ßn ƒë√¢y anh/ch·ªã c√≥: Kh·ªèi b·ªánh sau khi m·∫Øc b·ªánh vi√™m ƒë∆∞·ªùng ti·∫øt ni·ªáu, vi√™m da nhi·ªÖm tr√πng vi√™m ph·∫ø qu·∫£n, vi√™m ph·ªïi, s·ªüi, quai b·ªã, Rubella? Ti√™m v·∫Øc xin ph√≤ng b·ªánh? ƒêi v√†o v√πng c√≥ d·ªãch b·ªánh l∆∞u h√†nh (s·ªët r√©t, s·ªët xu·∫•t huy·∫øt, Zika,..)?",
    options: [
      { value: 'yes', label: 'C√≥' },
      { value: 'no', label: 'Kh√¥ng' },
      { value: 'uncertain', label: 'Kh√¥ng ch·∫Øc ch·∫Øn' }
    ]
  },
  {
    id: 5,
    text: "Trong 07 ng√†y g·∫ßn ƒë√¢y anh/ch·ªã c√≥: B·ªã c·∫£m c√∫m (ho, nh·ª©c ƒë·∫ßu, s·ªët...)? D√πng thu·ªëc kh√°ng sinh, Aspirin, Corticoid? Ti√™m Vacxin ph√≤ng Vi√™m gan si√™u vi B, Human Papilloma Virus?",
    options: [
      { value: 'yes', label: 'C√≥' },
      { value: 'no', label: 'Kh√¥ng' },
      { value: 'uncertain', label: 'Kh√¥ng ch·∫Øc ch·∫Øn' }
    ]
  },
  {
    id: 6,
    text: "C√¢u h·ªèi d√†nh cho ph·ª• n·ªØ: Hi·ªán c√≥ thai, ho·∫∑c nu√¥i con d∆∞·ªõi 12 th√°ng tu·ªïi? C√≥ kinh nguy·ªát trong v√≤ng m·ªôt tu·∫ßn hay kh√¥ng?",
    options: [
      { value: 'yes', label: 'C√≥' },
      { value: 'no', label: 'Kh√¥ng' },
      { value: 'uncertain', label: 'Kh√¥ng ch·∫Øc ch·∫Øn' },
      { value: 'not-applicable', label: 'Kh√¥ng √°p d·ª•ng (Nam gi·ªõi)' }
    ],
    isWomenOnly: true
  }
];

type ResultType = 'eligible' | 'ineligible' | 'consultation';
type AnswerValue = 'yes' | 'no' | 'uncertain' | 'not-applicable';

const EligibilityCheckerModal: React.FC<EligibilityCheckerModalProps> = ({ isOpen, onClose }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, AnswerValue>>({});
  const [showResult, setShowResult] = useState(false);
  const [result, setResult] = useState<ResultType | null>(null);

  // Load saved progress from localStorage
  useEffect(() => {
    if (isOpen) {
      const savedAnswers = localStorage.getItem('eligibility-check-answers');
      const savedQuestion = localStorage.getItem('eligibility-check-question');
      
      if (savedAnswers) {
        setAnswers(JSON.parse(savedAnswers));
      }
      if (savedQuestion) {
        setCurrentQuestion(parseInt(savedQuestion));
      }
    }
  }, [isOpen]);

  // Save progress to localStorage
  useEffect(() => {
    if (Object.keys(answers).length > 0) {
      localStorage.setItem('eligibility-check-answers', JSON.stringify(answers));
      localStorage.setItem('eligibility-check-question', currentQuestion.toString());
    }
  }, [answers, currentQuestion]);

  const handleAnswer = (questionId: number, answer: AnswerValue) => {
    const newAnswers = { ...answers, [questionId]: answer };
    setAnswers(newAnswers);

    // Check for immediate ineligibility
    if (answer === 'yes' && questionId <= 5) {
      setResult('ineligible');
      setShowResult(true);
      return;
    }

    // Move to next question or show results
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult(newAnswers);
    }
  };

  const calculateResult = (finalAnswers: Record<number, AnswerValue>) => {
    // Check for any "yes" answers to questions 1-5
    for (let i = 1; i <= 5; i++) {
      if (finalAnswers[i] === 'yes') {
        setResult('ineligible');
        setShowResult(true);
        return;
      }
    }

    // Check question 6 (women-specific)
    if (finalAnswers[6] === 'yes') {
      setResult('ineligible');
    } else if (finalAnswers[6] === 'uncertain') {
      setResult('consultation');
    } else {
      setResult('eligible');
    }
    
    setShowResult(true);
  };

  const goBack = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setShowResult(false);
    }
  };

  const resetChecker = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResult(false);
    setResult(null);
    localStorage.removeItem('eligibility-check-answers');
    localStorage.removeItem('eligibility-check-question');
  };

  const handleClose = () => {
    resetChecker();
    onClose();
  };

  const getResultContent = () => {
    switch (result) {
      case 'eligible':
        return {
          icon: <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />,
          title: 'Ch√∫c m·ª´ng! B·∫°n c√≥ th·ªÉ hi·∫øn m√°u',
          message: 'H√£y ƒëƒÉng k√Ω s·ª± ki·ªán hi·∫øn m√°u g·∫ßn nh·∫•t ƒë·ªÉ c·ª©u s·ªëng nhi·ªÅu ng∆∞·ªùi.',
          buttonText: 'ƒêƒÉng k√Ω hi·∫øn m√°u ngay',
          buttonColor: 'bg-green-500 hover:bg-green-600'
        };
      case 'ineligible':
        return {
          icon: <XCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />,
          title: 'Hi·ªán t·∫°i b·∫°n ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u',
          message: 'H√£y t√¨m hi·ªÉu th√™m v·ªÅ c√°c ƒëi·ªÅu ki·ªán v√† th·ª≠ l·∫°i sau.',
          buttonText: 'T√¨m hi·ªÉu th√™m v·ªÅ ƒëi·ªÅu ki·ªán',
          buttonColor: 'bg-red-500 hover:bg-red-600'
        };
      case 'consultation':
        return {
          icon: <AlertCircle className="w-16 h-16 text-yellow-500 mx-auto mb-4" />,
          title: 'B·∫°n c·∫ßn t∆∞ v·∫•n th√™m v·ªõi nh√¢n vi√™n y t·∫ø',
          message: 'Li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.',
          buttonText: 'Li√™n h·ªá t∆∞ v·∫•n',
          buttonColor: 'bg-yellow-500 hover:bg-yellow-600'
        };
      default:
        return null;
    }
  };

  if (!isOpen) return null;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto p-0 gap-0">
        {/* Header */}
        <DialogHeader className="p-6 pb-4 border-b border-gray-200/50">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-white to-orange-100 rounded-lg flex items-center justify-center shadow-md">
              <span className="text-white font-bold text-sm">ü©∏</span>
            </div>
            <DialogTitle className="text-lg font-inter font-semibold text-gray-900">
              Ki·ªÉm tra ƒëi·ªÅu ki·ªán hi·∫øn m√°u
            </DialogTitle>
          </div>
          
          {!showResult && (
            <div className="mt-4">
              <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
                <span>C√¢u h·ªèi {currentQuestion + 1} / {questions.length}</span>
                <span>{Math.round(((currentQuestion + 1) / questions.length) * 100)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
                />
              </div>
            </div>
          )}
        </DialogHeader>

        {/* Content */}
        <div className="p-6">
          {!showResult ? (
            <GlassCard className="border-0 shadow-none bg-transparent">
              <GlassCardHeader className="text-center">
                <GlassCardTitle className="text-xl leading-relaxed mb-6">
                  {questions[currentQuestion].text}
                </GlassCardTitle>
              </GlassCardHeader>
              
              <GlassCardContent className="space-y-4">
                {questions[currentQuestion].options.map((option) => (
                  <GlassButton
                    key={option.value}
                    variant="default"
                    size="lg"
                    className="w-full py-4 text-left justify-start"
                    onClick={() => handleAnswer(questions[currentQuestion].id, option.value)}
                  >
                    {option.label}
                  </GlassButton>
                ))}
              </GlassCardContent>

              {/* Navigation */}
              <div className="flex justify-between mt-8">
                <GlassButton
                  variant="ghost"
                  onClick={goBack}
                  disabled={currentQuestion === 0}
                  className="flex items-center gap-2"
                >
                  <ArrowLeft className="w-4 h-4" />
                  Quay l·∫°i
                </GlassButton>
                
                <GlassButton
                  variant="ghost"
                  onClick={resetChecker}
                  className="text-gray-500"
                >
                  L√†m l·∫°i
                </GlassButton>
              </div>
            </GlassCard>
          ) : (
            // Result Screen
            <div className="text-center">
              {getResultContent() && (
                <>
                  {getResultContent()!.icon}
                  <h3 className="text-2xl font-bold text-gray-900 mb-4">
                    {getResultContent()!.title}
                  </h3>
                  <p className="text-gray-600 mb-8 leading-relaxed">
                    {getResultContent()!.message}
                  </p>
                  
                  <div className="space-y-4">
                    <button
                      className={`w-full py-4 px-6 rounded-2xl text-white font-medium transition-all duration-300 hover:scale-105 ${getResultContent()!.buttonColor}`}
                      onClick={handleClose}
                    >
                      {getResultContent()!.buttonText}
                    </button>
                    
                    <GlassButton
                      variant="ghost"
                      onClick={resetChecker}
                      className="w-full"
                    >
                      Ki·ªÉm tra l·∫°i
                    </GlassButton>
                  </div>

                  {/* Support Information */}
                  <div className="mt-8 p-4 bg-blue-50 rounded-xl">
                    <p className="text-sm text-gray-600 mb-2">
                      C·∫ßn h·ªó tr·ª£ th√™m?
                    </p>
                    <p className="text-sm font-medium text-blue-600">
                      Hotline: 1900 1234 (24/7)
                    </p>
                  </div>
                </>
              )}
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default EligibilityCheckerModal;
